#!/usr/bin/python

vars = Variables()
vars.Add(BoolVariable('debug', 'Enable debug build', 0))
vars.Add(BoolVariable('profile', 'Enable profile build', 0))
vars.Add(BoolVariable('verbose', 'Show verbose compiling output', 0))

env = Environment(variables = vars)
Help(vars.GenerateHelpText(env))
try:
	import multiprocessing
	env.SetOption('num_jobs', multiprocessing.cpu_count())
except NotImplementedError:
	pass

if env['debug']:
	env.Append(CCFLAGS = '-g -Wall')
else:
	env.Append(CCFLAGS = '-O2 -DNDEBUG')
if env['profile']:
	env.Append(CCFLAGS = '-pg', _LIBFLAGS = ' -pg')
if not env['verbose']:
	env['CCCOMSTR'] = env['CXXCOMSTR'] = "compiling: $TARGET"
	env['LINKCOMSTR'] = "linking: $TARGET"
	env['ARCOMSTR'] = "archiving: $TARGET"

env.Append(CPPPATH = ['include'])

source_files = Glob('*.cpp') + \
               Glob('leveleditor/*.cpp') + \
               Glob('engine/*.cpp') + \
               Glob('engine/linux/*.c') + \
               Glob('gui/*.cpp')

env.ParseConfig("pkg-config jngl --cflags --libs")
source_files += Glob('engine/resize/*.cpp')
env.Append(LIBS = Split('boost_filesystem boost_serialization boost_system pthread'))

env.Append(CCFLAGS = '-DENABLE_BINRELOC', CPPFLAGS='-std=c++0x')

env.Program(target = "../jntetri",
            source = source_files)
